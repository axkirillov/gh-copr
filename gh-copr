#!/bin/bash
set -e

help() {
  cat <<EOF
Usage: gh copr
Display an interactive list of open PRs. The selected PR is checked out.
Options:
    -a filter prs that need your review 
    --help show this message
Dependencies: fzf, gomplate
EOF
}

if ! git rev-parse --git-dir > /dev/null 2>&1; then
	echo "not a git repository"
	exit 1 
fi

# Make sure fzf is available
if ! type -p fzf >/dev/null; then
  echo "fzf not found on the system" >&2
  exit 1
fi

# Make sure gomplate is available
if ! type -p gomplate >/dev/null; then
  echo "gomplate not found on the system" >&2
  exit 1
fi

list_prs() {
  # shellcheck disable=SC2016
  gh api graphql --cache=5m -F owner='{owner}' -F repo='{repo}' -f query='
    query ($owner: String!, $repo: String!) {
      repository(owner: $owner, name: $repo) {
        pullRequests(first: 100, states: [OPEN]) {
          nodes {
            number
            title
            author {
              login
            }
            state
            headRefName
          }
        }
      }
    }
  ' --template '
    {{- range .data.repository.pullRequests.nodes -}}
      {{- .number | printf "#%.0f\t" | color "green" -}}
      {{- .title | printf "%s\t" -}}
      {{- .headRefName | printf "%s\t" | color "cyan" -}}
      {{- .author.login | printf " by %s\t" -}}
      {{- .state | printf "%s\n" -}}
    {{- end -}}
  ' | column -t -s$'\t'
}

list_prs_that_need_my_review() {
	GH_USER=$(gh api user --jq .login)
	gh api graphql --cache=5m -F owner='{owner}' -F repo='{repo}' -f query='
      query ($owner: String!, $repo: String!) {
        repository(owner: $owner, name: $repo) {
          pullRequests(first: 100, states: [OPEN]) {
            nodes {
              number
              title
              author {
                login
              }
              reviewRequests (first: 10) {nodes {requestedReviewer {... on User {login}}}}
              state
              headRefName
            }
          }
        }
      }
  ' -q '
  .data.repository.pullRequests.nodes
  | map(
  		select(
			.reviewRequests.nodes.[] 
			| .requestedReviewer.login == "axkirillov"
		)
	)
  ' | gomplate -d data=stdin:///in.json -i '
  	{{- range ds "data" -}}
      {{- .number | printf "\033[0;32m#%d\033[0m\t" -}}
      {{- .title | printf "%s\t" -}}
      {{- .headRefName | printf "%s\t" -}}
      {{- .author.login | printf " by %s\t" -}}
      {{- .state | printf "%s\n" -}}
	{{- end -}}
	' | column -t -s$'\t'
}

while test $# != 0; do
  case "$1" in
    --help|-h)
      help
      exit
      ;;
    -a)
      assigned=1
      ;;
    *)
      help >&2
      exit 1
    ;;
  esac
  shift
done

if [ -n "$assigned" ]; then
	selected=$(fzf --ansi <<<"$(list_prs_that_need_my_review)")
	[ -n "$selected" ] || exit 1
	gh pr checkout "${selected%% *}"
	exit
fi

selected=$(fzf --ansi <<<"$(list_prs)")
[ -n "$selected" ] || exit 1
gh pr checkout "${selected%% *}"
